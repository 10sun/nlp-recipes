# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.
#

# Pull request against these branches will trigger this build
pr: none
#- master
#- staging
trigger: none

jobs:

- job: unit_tests_cpu
  timeoutInMinutes: 120

  pool:
   vmImage: 'ubuntu-16.04'

  steps:

  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.6'
      architecture: 'x64'
      addToPath: true
    displayName: 'Use Python 3.6'
    
  - bash:
      echo "##vso[task.prependpath]/usr/share/miniconda/bin"
    displayName: Add Conda to PATH
  
  - bash:
      python tools/generate_conda_file.py;
      conda env create -n nlp -f nlp_cpu.yaml;
      conda env list
    displayName: 'Creating Conda Environment with dependencies'
  
  - bash:
      source activate nlp &&
      conda env list &&
      ls -R /opt/conda &&
      ls -R /etc;
      conda install -y -c conda-forge ipykernel;
      python -m ipykernel install --user --name nlp --display-name "nlp";
      conda install -y -c anaconda pytest;
      pytest --durations=0 tests/unit --junitxml=junit/test-unittest.xml;
    displayName: 'Run Unit tests'

  - task: PublishTestResults@2
    displayName: 'Publish Test Results **/test-unitttest.xml'
    condition: always()
    inputs:
      testResultsFiles: '**/test-unittest.xml'
      failTaskOnFailedTests: true
      testRunTitle: 'Test results for PyTest'
  
  - task: ComponentGovernanceComponentDetection@0
    inputs:
      scanType: 'Register'
      verbosity: 'Verbose'
      alertWarningLevel: 'High'
  
  - job: unit_tests_gpu
    
    pool:
      name: "nlptestmachine"
    
    steps:
    
    - bash: |
        echo "##vso[task.prependpath]/data/anaconda/bin"
      displayName: Add Conda to PATH
    
    - bash: |
        python tools/generate_conda_file.py
        conda env create -n nlp_cpu -f nlp_cpu.yaml
      displayName: 'Creating Conda Environment with dependencies'
    
    - bash: |
        source activate nlp_cpu
        pytest tests/unit -m "notebooks and not gpu" --junitxml=junit/test-unitttest.xml
      displayName: 'Run Unit tests'
    
    - bash: |
          echo Remove Conda Environment
          conda remove -n nlp_cpu --all -q --force -y
          echo Done Cleanup
      displayName: 'Cleanup Task'
      condition: always()
    
    - task: PublishTestResults@2
      inputs:
        testResultsFiles: '**/test-unitttest.xml'
        testRunTitle: 'Test results for PyTest'
    
    - task: ComponentGovernanceComponentDetection@0
      inputs:
        scanType: 'Register'
        verbosity: 'Verbose'
        alertWarningLevel: 'High'